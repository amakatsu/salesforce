import { LightningElement, track } from "lwc";
import { ShowToastEvent } from "lightning/platformShowToastEvent";

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ „Éî„ÉÉ„ÇØ„É™„Çπ„ÉàÈÅ∏ÊäûËÇ¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const REVIEW_RESULT_OPTIONS = [
  { label: "ÂêàÊ†º", value: "ÂêàÊ†º" },
  { label: "Âê¶Ë™ç", value: "Âê¶Ë™ç" },
  { label: "‰øùÁïô", value: "‰øùÁïô" },
  { label: "ÂÜçÂØ©Êüª", value: "ÂÜçÂØ©Êüª" },
  { label: "‰∏ÄÊôÇÊâøË™ç", value: "‰∏ÄÊôÇÊâøË™ç" },
  { label: "Êù°‰ª∂‰ªò„ÅçÂêàÊ†º", value: "Êù°‰ª∂‰ªò„ÅçÂêàÊ†º" },
  { label: "‰∏ÄÈÉ®Âê¶Ë™ç", value: "‰∏ÄÈÉ®Âê¶Ë™ç" },
  { label: "„Ç≠„É£„É≥„Çª„É´", value: "„Ç≠„É£„É≥„Çª„É´" },
  { label: "Âèñ‰∏ã„Åí", value: "Âèñ‰∏ã„Åí" },
  { label: "Â∑ÆÊàª„Åó", value: "Â∑ÆÊàª„Åó" },
  { label: "ÂØ©Êüª‰∏≠", value: "ÂØ©Êüª‰∏≠" },
  { label: "Êú™ÂØ©Êüª", value: "Êú™ÂØ©Êüª" }
];

const CREDIT_TYPE_OPTIONS = [
  { label: "Êñ∞Ë¶è", value: "Êñ∞Ë¶è" },
  { label: "Êõ¥Êñ∞", value: "Êõ¥Êñ∞" },
  { label: "Âª∂Èï∑", value: "Âª∂Èï∑" },
  { label: "ËøΩÂä†", value: "ËøΩÂä†" },
  { label: "ÂâäÈô§", value: "ÂâäÈô§" },
  { label: "Â§âÊõ¥", value: "Â§âÊõ¥" },
  { label: "Ë¶ãÁõ¥„Åó", value: "Ë¶ãÁõ¥„Åó" },
  { label: "Ëá®ÊôÇ", value: "Ëá®ÊôÇ" },
  { label: "ÂÆö‰æã", value: "ÂÆö‰æã" },
  { label: "Á∑äÊÄ•", value: "Á∑äÊÄ•" },
  { label: "„Åù„ÅÆ‰ªñ", value: "„Åù„ÅÆ‰ªñ" }
];

const SUBJECT_OPTIONS = [
  { label: "Ë≤∏‰ªòÈáë", value: "Ë≤∏‰ªòÈáë" },
  { label: "ÊâãÂΩ¢", value: "ÊâãÂΩ¢" },
  { label: "‰∏é‰ø°Êû†", value: "‰∏é‰ø°Êû†" },
  { label: "Ââ≤Âºï", value: "Ââ≤Âºï" },
  { label: "ÊîØÊâï‰øùË®º", value: "ÊîØÊâï‰øùË®º" },
  { label: "„É™„Éº„Çπ", value: "„É™„Éº„Çπ" },
  { label: "„Éá„É™„Éê„ÉÜ„Ç£„Éñ", value: "„Éá„É™„Éê„ÉÜ„Ç£„Éñ" },
  { label: "„Ç≥„Éü„ÉÉ„Éà„É°„É≥„Éà„É©„Ç§„É≥", value: "„Ç≥„Éü„ÉÉ„Éà„É°„É≥„Éà„É©„Ç§„É≥" },
  { label: "„Çπ„Çø„É≥„Éâ„Éê„Ç§„Éª„ÇØ„É¨„Ç∏„ÉÉ„Éà", value: "„Çπ„Çø„É≥„Éâ„Éê„Ç§„Éª„ÇØ„É¨„Ç∏„ÉÉ„Éà" },
  { label: "„Åù„ÅÆ‰ªñÈáëËûçÂïÜÂìÅ", value: "„Åù„ÅÆ‰ªñÈáëËûçÂïÜÂìÅ" }
];

const USAGE_TYPE_OPTIONS = [
  { label: "‰ΩøÁî®‰∏≠", value: "‰ΩøÁî®‰∏≠" },
  { label: "Êú™‰ΩøÁî®", value: "Êú™‰ΩøÁî®" },
  { label: "ÂÅúÊ≠¢‰∏≠", value: "ÂÅúÊ≠¢‰∏≠" },
  { label: "‰∫àÂÆö", value: "‰∫àÂÆö" },
  { label: "‰∏ÄÈÉ®‰ΩøÁî®", value: "‰∏ÄÈÉ®‰ΩøÁî®" },
  { label: "‰∫àÁ¥ÑÊ∏à", value: "‰∫àÁ¥ÑÊ∏à" },
  { label: "ÊúüÈôêÂàá„Çå", value: "ÊúüÈôêÂàá„Çå" },
  { label: "Ëß£Á¥ÑÊ∏à", value: "Ëß£Á¥ÑÊ∏à" },
  { label: "ÂáçÁµê‰∏≠", value: "ÂáçÁµê‰∏≠" },
  { label: "Ë™øÊüª‰∏≠", value: "Ë™øÊüª‰∏≠" }
];

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ „É¢„ÉÉ„ÇØ„Éá„Éº„ÇøÁîüÊàê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function generateMockData(count = 100) {
  return Array.from({ length: count }, (_, i) => ({
    Id: `${i + 1}`.padStart(3, "0"),
    isSelected: false,
    Branch: "Êú¨Â∫ó",
    Workplace: `ÈÉ®ÁΩ≤ ${i + 1}`,
    ReviewResult: REVIEW_RESULT_OPTIONS[i % REVIEW_RESULT_OPTIONS.length].value,
    CreditNo: `${1000 + i}`,
    CreditType: CREDIT_TYPE_OPTIONS[i % CREDIT_TYPE_OPTIONS.length].value,
    Subject: SUBJECT_OPTIONS[i % SUBJECT_OPTIONS.length].value,
    Authorization: i % 2 === 0,
    MonthEndSettlement: i % 3 === 0,
    UsageType: USAGE_TYPE_OPTIONS[i % USAGE_TYPE_OPTIONS.length].value,
    Inclusive: i % 4 === 0,
    AssessmentA: i % 2 === 0,
    AssessmentB: i % 3 === 0,
    BulkTransition: i % 5 === 0,
    PartnerDeadline: new Date(2025, 6, 1 + i).toISOString().split("T")[0],
    ApprovalDate: new Date(2025, 6, 10 + i).toISOString().split("T")[0],
    Description: `ÂÇôËÄÉÂÜÖÂÆπ ${i + 1}`,
    liked: i % 2 === 1 // üëç ÂàùÊúüÁä∂ÊÖã
  }));
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LWC „ÇØ„É©„Çπ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export default class CustomTableWithTh extends LightningElement {
  /* Ë°å„Éá„Éº„Çø */
  @track accounts = generateMockData(100);

  /* ---------- „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊèèÁîªÁî® ---------- */
  get processedAccounts() {
    return this.accounts.map((acc) => {
      /* „Éê„ÉÉ„Ç∏Ëâ≤Ë®≠ÂÆö */
      let badgeClass = "slds-badge";
      if (["ÂêàÊ†º", "‰∏ÄÊôÇÊâøË™ç", "Êù°‰ª∂‰ªò„ÅçÂêàÊ†º"].includes(acc.ReviewResult)) {
        badgeClass = "slds-badge slds-badge_success";
      } else if (["Âê¶Ë™ç", "‰∏ÄÈÉ®Âê¶Ë™ç"].includes(acc.ReviewResult)) {
        badgeClass = "slds-badge slds-badge_error";
      } else if (["‰øùÁïô", "ÂÜçÂØ©Êüª"].includes(acc.ReviewResult)) {
        badgeClass = "slds-badge slds-badge_warning";
      }

      return {
        ...acc,
        badge: { class: badgeClass, label: acc.ReviewResult }
        // icon-class „ÅØ‰Ωø„Çè„Åö„Ç¢„Ç§„Ç≥„É≥ÂΩ¢Áä∂„Å†„ÅëÂàáÊõø
      };
    });
  }

  /* ---------- Like „Éà„Ç∞„É´ ---------- */
  @track likeState = false;
  @track answerState = false;
  @track likeStateSize01 = false;
  @track likeStateSize02 = false;
  @track likeStateSize03 = false;
  @track likeStateSize04 = false;
  @track likeStateDisabled = false;
  @track answerStateDisabled = false;

  handleLikeButtonClick(event) {
    const { id } = event.currentTarget.dataset; // Ë°å ID ÂèñÂæó
    this.accounts = this.accounts.map(
      (a) => (a.Id === id ? { ...a, liked: !a.liked } : a) // „Åù„ÅÆË°å„Å†„ÅëÂèçËª¢
    );
  }

  handleAnswerButtonClick() {
    this.answerState = !this.answerState;
  }

  handleLikeButtonSizeClick(event) {
    const buttonNumber = event.target.dataset.buttonNumber;

    this[`likeStateSize${buttonNumber}`] =
      !this[`likeStateSize${buttonNumber}`];
  }

  handleLikeButtonDisabledClick() {
    this.likeStateDisabled = !this.likeStateDisabled;
  }

  handleAnswerButtonDisabledClick() {
    this.answerStateDisabled = !this.answerStateDisabled;
  }
  /* ---------- Ë°å‰∏ÄÊã¨„ÉÅ„Çß„ÉÉ„ÇØ ---------- */
  get allRowsSelected() {
    return this.accounts.every((a) => a.isSelected);
  }

  handleSelectAll(e) {
    const chk = e.target.checked;
    this.accounts = this.accounts.map((a) => ({ ...a, isSelected: chk }));
  }

  handleRowSelection(e) {
    const { id } = e.currentTarget.dataset;
    const chk = e.target.checked;
    this.accounts = this.accounts.map((a) =>
      a.Id === id ? { ...a, isSelected: chk } : a
    );
  }

  /* ---------- ÂÖ•ÂäõÂ§âÊõ¥ ---------- */
  handleInputChange(e) {
    const { id, field } = e.currentTarget.dataset;
    const val =
      e.target.type === "checkbox" ? e.detail.checked : e.detail.value;
    this.accounts = this.accounts.map((a) =>
      a.Id === id ? { ...a, [field]: val } : a
    );
  }

  /* ---------- ‰øùÂ≠òÔºà„É¢„ÉÉ„ÇØÔºâ ---------- */
  handleSave() {
    this.dispatchEvent(
      new ShowToastEvent({
        title: "Success",
        message: "Records updated successfully (mock).",
        variant: "success"
      })
    );
  }

  /* ---------- „Éî„ÉÉ„ÇØ„É™„Çπ„Éà ---------- */
  reviewResultOptions = REVIEW_RESULT_OPTIONS;
  creditTypeOptions = CREDIT_TYPE_OPTIONS;
  subjectOptions = SUBJECT_OPTIONS;
  usageTypeOptions = USAGE_TYPE_OPTIONS;
}
